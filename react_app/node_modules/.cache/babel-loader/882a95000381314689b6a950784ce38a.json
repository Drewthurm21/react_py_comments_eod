{"ast":null,"code":"const GET_COMMENTS = 'comments/LOAD';\nconst DELETE_COMMENT = 'comment/DELETE';\n\nconst getCommentsAction = commentsOject => {\n  return {\n    type: GET_COMMENTS,\n    payload: commentsOject\n  };\n};\n\nconst deleteCommentAction = deletedComment => {\n  return {\n    type: DELETE_COMMENT,\n    payload: deletedComment\n  };\n};\n\nexport const getCommentsThunk = () => async dispatch => {\n  const response = await fetch('/comments');\n  let comment_obj = await response.json();\n  let commentArr = comment_obj.comments;\n\n  if (response.ok) {\n    dispatch(getCommentsAction(commentArr));\n  } else {//error stuff\n  }\n};\nexport const createCommentThunk = comment => async dispatch => {\n  let res = await fetch('/new', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(comment)\n  });\n};\nexport const deleteCommentThunk = id => async dispatch => {\n  const response = await fetch(`/delete/${id}`);\n\n  if (response.ok) {\n    dispatch(deleteCommentAction(id));\n  } else {//error stuff\n  }\n};\nconst initialState = [];\nexport default function commentsReducer(state = initialState, action) {\n  const newState = [...state];\n\n  switch (action.type) {\n    case GET_COMMENTS:\n      return action.payload;\n\n    case DELETE_COMMENT:\n      return newState.filter(comment => comment.id !== action.payload);\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/drew/myrepo/React_EOD-starter/react_app/src/store/comments.js"],"names":["GET_COMMENTS","DELETE_COMMENT","getCommentsAction","commentsOject","type","payload","deleteCommentAction","deletedComment","getCommentsThunk","dispatch","response","fetch","comment_obj","json","commentArr","comments","ok","createCommentThunk","comment","res","method","headers","body","JSON","stringify","deleteCommentThunk","id","initialState","commentsReducer","state","action","newState","filter"],"mappings":"AAAA,MAAMA,YAAY,GAAG,eAArB;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AAGA,MAAMC,iBAAiB,GAAIC,aAAD,IAAmB;AACzC,SAAO;AACHC,IAAAA,IAAI,EAAEJ,YADH;AAEHK,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,mBAAmB,GAAIC,cAAD,IAAoB;AAC5C,SAAO;AACHH,IAAAA,IAAI,EAAEH,cADH;AAEHI,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACtD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,CAA5B;AACA,MAAIC,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;AACA,MAAIC,UAAU,GAAGF,WAAW,CAACG,QAA7B;;AACA,MAAIL,QAAQ,CAACM,EAAb,EAAiB;AACbP,IAAAA,QAAQ,CAACP,iBAAiB,CAACY,UAAD,CAAlB,CAAR;AACH,GAFD,MAEO,CACH;AACH;AACJ,CATM;AAWP,OAAO,MAAMG,kBAAkB,GAAIC,OAAD,IAAa,MAAOT,QAAP,IAAoB;AAC/D,MAAIU,GAAG,GAAG,MAAMR,KAAK,CAAC,MAAD,EAAS;AAC1BS,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFiB;AAG1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf;AAHoB,GAAT,CAArB;AAQH,CATM;AAWP,OAAO,MAAMO,kBAAkB,GAAIC,EAAD,IAAQ,MAAOjB,QAAP,IAAoB;AAC1D,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,WAAUe,EAAG,EAAf,CAA5B;;AACA,MAAIhB,QAAQ,CAACM,EAAb,EAAiB;AACbP,IAAAA,QAAQ,CAACH,mBAAmB,CAACoB,EAAD,CAApB,CAAR;AACH,GAFD,MAEO,CACH;AACH;AACJ,CAPM;AAUP,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAK,GAAGF,YAAjC,EAA+CG,MAA/C,EAAuD;AAClE,QAAMC,QAAQ,GAAG,CAAC,GAAGF,KAAJ,CAAjB;;AACA,UAAQC,MAAM,CAAC1B,IAAf;AACI,SAAKJ,YAAL;AACI,aAAO8B,MAAM,CAACzB,OAAd;;AACJ,SAAKJ,cAAL;AACI,aAAO8B,QAAQ,CAACC,MAAT,CAAgBd,OAAO,IAAIA,OAAO,CAACQ,EAAR,KAAeI,MAAM,CAACzB,OAAjD,CAAP;;AACJ;AACI,aAAOwB,KAAP;AANR;AAQH","sourcesContent":["const GET_COMMENTS = 'comments/LOAD'\r\nconst DELETE_COMMENT = 'comment/DELETE'\r\n\r\n\r\nconst getCommentsAction = (commentsOject) => {\r\n    return {\r\n        type: GET_COMMENTS,\r\n        payload: commentsOject\r\n    }\r\n}\r\n\r\nconst deleteCommentAction = (deletedComment) => {\r\n    return {\r\n        type: DELETE_COMMENT,\r\n        payload: deletedComment\r\n    }\r\n}\r\n\r\nexport const getCommentsThunk = () => async (dispatch) => {\r\n    const response = await fetch('/comments')\r\n    let comment_obj = await response.json()\r\n    let commentArr = comment_obj.comments\r\n    if (response.ok) {\r\n        dispatch(getCommentsAction(commentArr))\r\n    } else {\r\n        //error stuff\r\n    }\r\n}\r\n\r\nexport const createCommentThunk = (comment) => async (dispatch) => {\r\n    let res = await fetch('/new', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(comment)\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\nexport const deleteCommentThunk = (id) => async (dispatch) => {\r\n    const response = await fetch(`/delete/${id}`)\r\n    if (response.ok) {\r\n        dispatch(deleteCommentAction(id))\r\n    } else {\r\n        //error stuff\r\n    }\r\n}\r\n\r\n\r\nconst initialState = []\r\nexport default function commentsReducer(state = initialState, action) {\r\n    const newState = [...state]\r\n    switch (action.type) {\r\n        case GET_COMMENTS:\r\n            return action.payload\r\n        case DELETE_COMMENT:\r\n            return newState.filter(comment => comment.id !== action.payload)\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}