{"ast":null,"code":"const GET_COMMENTS = 'comments/LOAD';\nconst CREATE_COMMENT = 'comment/ADD';\nconst DELETE_COMMENT = 'comment/DELETE';\n\nconst getCommentsAction = commentsOject => {\n  return {\n    type: GET_COMMENTS,\n    payload: commentsOject\n  };\n};\n\nconst deleteCommentAction = deletedComment => {\n  return {\n    type: DELETE_COMMENT,\n    payload: deletedComment\n  };\n};\n\nconst createCommentAction = comment => {\n  return {\n    type: CREATE_COMMENT,\n    payload: comment\n  };\n};\n\nexport const getCommentsThunk = () => async dispatch => {\n  const response = await fetch('/comments');\n  let comment_obj = await response.json();\n\n  if (response.ok) {\n    dispatch(getCommentsAction(comment_obj));\n  } else {//error stuff\n  }\n};\nexport const createCommentThunk = comment => async dispatch => {\n  let res = await fetch('/new', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(comment)\n  });\n\n  if (res.ok) {\n    let comment = await res.json();\n    dispatch(createCommentAction(comment));\n  }\n};\nexport const deleteCommentThunk = id => async dispatch => {\n  const response = await fetch(`/delete/${id}`);\n\n  if (response.ok) {\n    dispatch(deleteCommentAction(id));\n  } else {//error stuff\n  }\n};\nconst initialState = {};\nexport default function commentsReducer(state = initialState, action) {\n  const newState = { ...state\n  };\n\n  switch (action.type) {\n    case GET_COMMENTS:\n      return action.payload;\n\n    case CREATE_COMMENT:\n      newState[action.payload.id] = action.payload;\n      return newState;\n\n    case DELETE_COMMENT:\n      delete newState[action.payload];\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/home/drew/myrepo/React_EOD-starter/react_app/src/store/comments.js"],"names":["GET_COMMENTS","CREATE_COMMENT","DELETE_COMMENT","getCommentsAction","commentsOject","type","payload","deleteCommentAction","deletedComment","createCommentAction","comment","getCommentsThunk","dispatch","response","fetch","comment_obj","json","ok","createCommentThunk","res","method","headers","body","JSON","stringify","deleteCommentThunk","id","initialState","commentsReducer","state","action","newState"],"mappings":"AAAA,MAAMA,YAAY,GAAG,eAArB;AACA,MAAMC,cAAc,GAAG,aAAvB;AACA,MAAMC,cAAc,GAAG,gBAAvB;;AAGA,MAAMC,iBAAiB,GAAIC,aAAD,IAAmB;AACzC,SAAO;AACHC,IAAAA,IAAI,EAAEL,YADH;AAEHM,IAAAA,OAAO,EAAEF;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMG,mBAAmB,GAAIC,cAAD,IAAoB;AAC5C,SAAO;AACHH,IAAAA,IAAI,EAAEH,cADH;AAEHI,IAAAA,OAAO,EAAEE;AAFN,GAAP;AAIH,CALD;;AAOA,MAAMC,mBAAmB,GAAIC,OAAD,IAAa;AACrC,SAAO;AACHL,IAAAA,IAAI,EAAEJ,cADH;AAEHK,IAAAA,OAAO,EAAEI;AAFN,GAAP;AAIH,CALD;;AAOA,OAAO,MAAMC,gBAAgB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACtD,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,WAAD,CAA5B;AACA,MAAIC,WAAW,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAxB;;AAEA,MAAIH,QAAQ,CAACI,EAAb,EAAiB;AACbL,IAAAA,QAAQ,CAACT,iBAAiB,CAACY,WAAD,CAAlB,CAAR;AACH,GAFD,MAEO,CACH;AACH;AACJ,CATM;AAWP,OAAO,MAAMG,kBAAkB,GAAIR,OAAD,IAAa,MAAOE,QAAP,IAAoB;AAC/D,MAAIO,GAAG,GAAG,MAAML,KAAK,CAAC,MAAD,EAAS;AAC1BM,IAAAA,MAAM,EAAE,MADkB;AAE1BC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFiB;AAG1BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAed,OAAf;AAHoB,GAAT,CAArB;;AAMA,MAAIS,GAAG,CAACF,EAAR,EAAY;AACR,QAAIP,OAAO,GAAG,MAAMS,GAAG,CAACH,IAAJ,EAApB;AACAJ,IAAAA,QAAQ,CAACH,mBAAmB,CAACC,OAAD,CAApB,CAAR;AACH;AACJ,CAXM;AAaP,OAAO,MAAMe,kBAAkB,GAAIC,EAAD,IAAQ,MAAOd,QAAP,IAAoB;AAC1D,QAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,WAAUY,EAAG,EAAf,CAA5B;;AACA,MAAIb,QAAQ,CAACI,EAAb,EAAiB;AACbL,IAAAA,QAAQ,CAACL,mBAAmB,CAACmB,EAAD,CAApB,CAAR;AACH,GAFD,MAEO,CACH;AACH;AACJ,CAPM;AAUP,MAAMC,YAAY,GAAG,EAArB;AACA,eAAe,SAASC,eAAT,CAAyBC,KAAK,GAAGF,YAAjC,EAA+CG,MAA/C,EAAuD;AAClE,QAAMC,QAAQ,GAAG,EAAE,GAAGF;AAAL,GAAjB;;AACA,UAAQC,MAAM,CAACzB,IAAf;AACI,SAAKL,YAAL;AACI,aAAO8B,MAAM,CAACxB,OAAd;;AACJ,SAAKL,cAAL;AACI8B,MAAAA,QAAQ,CAACD,MAAM,CAACxB,OAAP,CAAeoB,EAAhB,CAAR,GAA8BI,MAAM,CAACxB,OAArC;AACA,aAAOyB,QAAP;;AACJ,SAAK7B,cAAL;AACI,aAAO6B,QAAQ,CAACD,MAAM,CAACxB,OAAR,CAAf;;AACJ;AACI,aAAOuB,KAAP;AATR;AAWH","sourcesContent":["const GET_COMMENTS = 'comments/LOAD'\r\nconst CREATE_COMMENT = 'comment/ADD'\r\nconst DELETE_COMMENT = 'comment/DELETE'\r\n\r\n\r\nconst getCommentsAction = (commentsOject) => {\r\n    return {\r\n        type: GET_COMMENTS,\r\n        payload: commentsOject\r\n    }\r\n}\r\n\r\nconst deleteCommentAction = (deletedComment) => {\r\n    return {\r\n        type: DELETE_COMMENT,\r\n        payload: deletedComment\r\n    }\r\n}\r\n\r\nconst createCommentAction = (comment) => {\r\n    return {\r\n        type: CREATE_COMMENT,\r\n        payload: comment\r\n    }\r\n}\r\n\r\nexport const getCommentsThunk = () => async (dispatch) => {\r\n    const response = await fetch('/comments')\r\n    let comment_obj = await response.json()\r\n\r\n    if (response.ok) {\r\n        dispatch(getCommentsAction(comment_obj))\r\n    } else {\r\n        //error stuff\r\n    }\r\n}\r\n\r\nexport const createCommentThunk = (comment) => async (dispatch) => {\r\n    let res = await fetch('/new', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(comment)\r\n    })\r\n\r\n    if (res.ok) {\r\n        let comment = await res.json()\r\n        dispatch(createCommentAction(comment))\r\n    }\r\n}\r\n\r\nexport const deleteCommentThunk = (id) => async (dispatch) => {\r\n    const response = await fetch(`/delete/${id}`)\r\n    if (response.ok) {\r\n        dispatch(deleteCommentAction(id))\r\n    } else {\r\n        //error stuff\r\n    }\r\n}\r\n\r\n\r\nconst initialState = {}\r\nexport default function commentsReducer(state = initialState, action) {\r\n    const newState = { ...state }\r\n    switch (action.type) {\r\n        case GET_COMMENTS:\r\n            return action.payload\r\n        case CREATE_COMMENT:\r\n            newState[action.payload.id] = action.payload\r\n            return newState\r\n        case DELETE_COMMENT:\r\n            delete newState[action.payload]\r\n        default:\r\n            return state\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}